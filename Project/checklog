#!/usr/bin/python3
import base64
import hashlib
import os
import sys

def file_exists(path: str) -> bool:
    return os.path.exists(path) and os.path.isfile(path)

def get_b64_hash(text: str) -> str:
    sha256_hash = hashlib.sha256(text.encode('utf-8')).digest()
    base64_hash = base64.b64encode(sha256_hash).decode('utf-8')
    last_24_bytes = base64_hash[-24:]
    return last_24_bytes

def check_log() -> None:
    if not file_exists("log.txt"):
        print("failed: log.txt does not exist")
        sys.exit(1)
    if not file_exists("loghead.txt"):
        print("failed: loghead.txt does not exist")
        sys.exit(1)

    with open("log.txt", "r") as log_file:

        line_count = 1
        line = log_file.readline().strip()
        while line:

            # Parse hash of current line.
            parsed_hash = line[29:].split(" ")[0]

            if line_count == 1: # If first line, check for "start" in hash position. Get hash and read next line (no comparisons).
                if parsed_hash != "start":
                    print("failed: invalid first log entry")
                    sys.exit(1)

            else: # Check if hash stored in current line is equal to the hash of the entire previous line.
                if parsed_hash != hash_of_line:
                    print("failed: changes detected at line " + str(line_count - 1))
                    sys.exit(1)

            hash_of_line = get_b64_hash(line)
            line_count += 1
            line = log_file.readline().strip()

        with open("loghead.txt", "r") as loghead_file:
            loghead = loghead_file.readline()

        if loghead != hash_of_line:
            print("failed: changes detected at line " + str(line_count - 1))
            sys.exit(1)
        else:
            print("Valid")
            sys.exit(0)

if __name__ == "__main__":
    if len(sys.argv) > 1:
        print("Usage: no arguments")
    else:
        check_log()