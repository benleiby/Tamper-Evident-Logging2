#!/usr/bin/python3
import hashlib
import itertools
import socket
import string
import sys
import re

def normalize_whitespace(text: str) -> str:
    return re.sub(r'\s+', ' ', text).strip()

def satisfies_pow_constraint(text: str) -> bool:
    sha256_hash = hashlib.sha256(text.encode('utf-8')).digest()
    if len(sha256_hash) < 3:
        return False
    if sha256_hash[0] == 0 and sha256_hash[1] == 0 and (sha256_hash[2] & 0b11111100) == 0:
        return True
    else:
        return False

def generate_pow_string(text: str) -> str:
    for length in range(1, 10):  # Adjust the maximum length as needed
        for pow_candidate in itertools.product(string.ascii_letters + string.digits, repeat=length):
            pow_string = "".join(pow_candidate)
            combined_string = pow_string + ":" + text
            if satisfies_pow_constraint(combined_string):
                return combined_string

def send_string_to_server(port, message):
    try:
        # Connect to the server
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect(('localhost', port))

        ######################
        ### Convert any whitespace to spaces
        ### Modify the message to include the proof-of-work (Pow+':'+message)
        ######################

        normalized_message = normalize_whitespace(message)
        pow_string = generate_pow_string(normalized_message)

        with client_socket.makefile('r') as server_in, client_socket.makefile('w') as server_out:
            server_out.write(pow_string + "\n")
            server_out.flush()

            # Receive and print the confirmation message from the server
            response = server_in.readline().strip()
            print(f"Server response: {response}")

    except Exception as e:
        print(f"Error communicating with server: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: log <port> <message>")
    else:
        port = int(sys.argv[1])
        message = sys.argv[2]
        send_string_to_server(port, message)