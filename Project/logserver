#!/usr/bin/python3
import hashlib
import socket

def get_hash_bits(text: str) -> str:
    hash_bytes = hashlib.sha256(text.encode('utf-8')).digest()
    binary_string = ''.join(format(byte, '08b') for byte in hash_bytes)
    return binary_string

def handle_client(client_socket):
    try:
        # Use socket file interface to read line by line
        with client_socket.makefile('r') as client_in, client_socket.makefile('w') as client_out:
            # Receive the string from the client (terminated by a newline)
            message = client_in.readline().strip()
            print(f"Received: {message}")

            ########## YOUR CODE HERE ############
            ### Validate the the PoW in the message
            ### Strip the PoW from the message
            ### Read the last hash from loghead.txt
            ### Create the full line for the log entry
            ### Compute its hash
            ### Append the line to the log
            ### Update loghead.txt
            ### Add error checking
            #######################################
            response = ""
            if not get_hash_bits(message).startswith('0' * 22):
                response = "failed\n"
            else:
                # Strip the message, handle missing colon as invalid string.
                try:
                    index = message.index(":")
                    stripped = message[index:]
                except ValueError:
                    response = "failed\n"

                # Append the received string to log.txt
                with open("log.txt", "a") as log_file:
                    log_file.write(message + "\n")
            client_out.write(response)
            client_out.flush()

    except Exception as e:
        print(f"logserver: {e}")
    finally:
        client_socket.close()

def start_server():
    # Create a socket and bind it to any available port
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 0))  # Bind to any available port
    server_socket.listen(5)

    # Get the port number and print it
    port = server_socket.getsockname()[1]
    print(f"Server listening on port {port}")

    # Continuously accept and handle clients
    while True:
        client_socket, addr = server_socket.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

if __name__ == "__main__":
    start_server()

